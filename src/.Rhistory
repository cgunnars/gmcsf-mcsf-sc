getwd()
ls
library(dplyr)
library(Matrix)
library(Seurat)
library(cowplot)
library(ggplot2)
library(reticulate)
library(KEGGprofile)
library(topGO)
set.seed(666)
#Set up file names and conditions
m_files = c('../data/reads.Sample1_MCSF_R1_001.fastq_bq10_star_corrected.umi.dge.txt', '../data/mcsf_day6_1.txt', '../data/mcsf_day6_2.txt')
m_donors = c('2', '1', '1')
g_files = c('../data/gmcsf_day6_1.txt', '../data/gmcsf_day6_2.txt', '../data/reads.Sample2_gMCSF_R1_001.fastq_bq10_star_corrected.umi.dge.txt')
g_donors = c('1', '1', '2')
files = c(m_files, g_files)
donornames = c(m_donors, g_donors)
stimnames = c(rep('M', length(m_donors)), rep('G', length(g_donors)))
#Returns Seurat Object with donor information and stimulation condition as metadata
loadData <- function(filename, stimname, donorname) {
raw_counts <- read.table(file = filename, header = TRUE, row.names = 1, sep = '\t', stringsAsFactors = FALSE)
raw <- CreateSeuratObject(counts = raw_counts, project = "mcsf-gmcsf", min.cells = 3, min.features = 200)
raw$stim <- stimname
raw$donor <- donorname
Idents(raw) <- 'stim'
return(raw)
}
performQC <- function(raw, plot = FALSE){
#Calculate percent mitochondrial reads
mito.genes <- grep(pattern = "^MT-", x = rownames(x = GetAssayData(object = raw)), value = TRUE)
raw[['percent.mt']] <- (colSums(GetAssayData(object = raw, slot = "counts")[mito.genes, ]) /
colSums(GetAssayData(object = raw, slot = "counts")) * 100)
if (plot) {
scatter <- FeatureScatter(object = raw, feature1 = 'nCount_RNA', feature2 = 'nFeature_RNA', group.by = 'percent.mt')
print(scatter)
#Count QC
counts = raw$nCount_RNA
cts <- qplot(counts, geom = 'histogram', bins = 100)
cts_lo <- qplot(counts[counts < 5000], geom = 'histogram', bins = 100)
cts_hi <- qplot(counts[counts > 10000], geom = 'histogram', bins = 100)
cts_grid <- plot_grid(cts, cts_lo, cts_hi)
print(cts_grid)
#Gene QC
genes = raw$nFeature_RNA
gen <- qplot(genes, geom = 'histogram', bins = 100)
gen_lo <- qplot(genes[genes < 1000], geom = 'histogram', bins = 100)
gen_grid <- plot_grid(gen, gen_lo)
print(gen_grid)
vln <- VlnPlot(object = raw, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), group.by = 'stim', ncol = 3)
print(vln)
}
#Filter
raw <- subset(raw, subset = nCount_RNA > 2500 & nCount_RNA < 75000 & percent.mt < 20)
raw <- NormalizeData(raw, verbose = FALSE)
raw <- FindVariableFeatures(raw, selection.method = "vst", nfeatures = 4000)
return(raw)
}
scaleData <- function(raw) {
raw <- ScaleData(raw, vars.to.regress = c("nUMI", "percent.mt"), verbose = FALSE)
raw <- RunPCA(raw, features = VariableFeatures(object = raw), npcs = 100, verbose = FALSE)
p2 <- DimPlot(raw)
return(raw)
}
main <- function(files, g_donors, m_donors, donornames, stimnames) {
# Load the datasets
alldata <- lapply(1:length(files), function(i) i)
mergeruns <- lapply(1:(length(unique(g_donors)) + length(unique(m_donors))), function(i) i)
ctr = 0
for (i in seq_along(files)){
alldata[[i]] <- loadData(files[i], stimnames[i],  donornames[i])
# merge runs with the same donor and stimulation
if (i == 1 || donornames[i - 1] != donornames[i] || stimnames[i - 1] != stimnames[i]) {
if (ctr > 0) {
#cellCycle(mergeruns[[ctr]])
mergeruns[[ctr]] <- performQC(mergeruns[[ctr]], plot=TRUE)
mergeruns[[ctr]] <- scaleData(mergeruns[[ctr]])
}
ctr = ctr + 1
mergeruns[[ctr]] <- alldata[[i]]
} else {
mergeruns[[ctr]] <- merge(mergeruns[[ctr]], alldata[[i]])
}
}
mergeruns[[length(mergeruns)]] <- performQC(mergeruns[[length(mergeruns)]], plot=TRUE)
scaleData(mergeruns[[length(mergeruns)]])
}
main(files, g_donors, m_donors, donornames, stimnames)
getwd()
